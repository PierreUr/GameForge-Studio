"step","prompt"
"implementierung","Implementiere die Möglichkeit, Sektionen zu verschachteln. 1. Modifiziere die `ColumnData`-Definition in `UIEditorPanel.tsx`, sodass das `widgets`-Array (benenne es ggf. in `items` um) sowohl `WidgetData` als auch `SectionData` enthalten kann. 2. Überarbeite die `Column.tsx`-Komponente, damit sie durch dieses gemischte Array iteriert und bedingt entweder ein Widget oder eine rekursive `Section`-Komponente rendert. Die `Section`-Komponente benötigt hierfür viele durchgereichte Props. 3. Passe die `onDrop`-Logik in `Column.tsx` an, sodass sie erkennt, wenn eine 'layout-section' gedroppt wird, und eine neue `SectionData` in ihr `items`-Array einfügt. 4. Mache die Suchfunktionen im `RightSidebar.tsx` (z.B. `findWidgetData`) rekursiv, damit der Inspector auch Widgets in verschachtelten Sektionen finden kann."
"test","Beschreibe einen manuellen UI-Test: 1. Ziehe eine Sektion (A) auf die Leinwand. 2. Ziehe eine zweite Sektion (B) aus der Bibliothek *in die Spalte* von Sektion A. 3. Überprüfe, ob Sektion B korrekt innerhalb von Sektion A angezeigt wird. 4. Ziehe ein 'Heading'-Widget in Sektion B. 5. Wähle das Heading-Widget aus und überprüfe, ob der Inspector dessen Eigenschaften korrekt anzeigt."